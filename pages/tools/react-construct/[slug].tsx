import type { NextPage } from 'next';
import Head from 'next/head';
import PageContentWrap from '../../../components/generic/PageContentWrap';
import Flex from '../../../components/generic/Flex';
import Footer from '../../../components/Footer';
import PageWithFooter from '../../../components/generic/PageWithFooter';
import Banner from '../../../components/Banner';
import PageTitle from '../../../components/PageTitle';
import PageIntro from '../../../components/PageIntro';
import tools from '../../../data/tools/list';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import CodeBox from '../../../components/generic/CodeBox';
import DetachedHoverEffect from '../../../components/generic/DetachedHoverEffect';
import s from './[slug].module.css';
import ContentSlider from '../../../components/generic/ContentSlider';
import SelectInput from '../../../components/generic/SelectInput';
import SelectOption from '../../../components/generic/SelectOption';
import SelectValue from '../../../components/generic/SelectValue';

const ToolsReactLibrary: NextPage = () => {
  const router = useRouter();

  const options = [
    { id: 'hello', value: 'Hello' },
    { id: 'word', value: 'Word' },
    { id: 'bur', value: 'bur' },
  ];
  const [currentTool, setCurrentTool] = useState();
  const [selectedOption, setSelectedOption] = useState(options[2]);
  const [selectVisibility, setSelectVisibility] = useState(false);

  useEffect(() => {
    const tool = tools.find((tool) => tool.slug === router.query.slug);

    if (!tool) {
      return;
    }

    setCurrentTool(tool);
  }, [router]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageWithFooter>
        <main style={{ background: '#ECF4FA' }}>
          <Banner />
          <PageContentWrap>
            <div style={{ marginBottom: 128 }}>
              <div style={{ textAlign: 'center', marginTop: 64 }}>
                <PageTitle>React Construct</PageTitle>
                <PageIntro>
                  React Construct is a library of low-level react components
                  used by developers to construct their own UI components.
                  react-construct-components
                </PageIntro>
              </div>
            </div>
          </PageContentWrap>
          <div
            style={{
              background: 'white',
              //padding: '16px'
              paddingTop: '64px',
              position: 'sticky',
              top: 0,
            }}
          >
            <PageContentWrap>
              <Flex
                style={{
                  //gap: '64px',
                  width: '100%',
                }}
              >
                <div
                  style={{
                    width: '30%',
                    paddingRight: '64px',
                    flexShrink: 0,
                    flexGrow: 0,
                  }}
                >
                  {tools.map((tool) => (
                    <Link
                      key={tool.slug}
                      href={tool.slug}
                      scroll={false}
                      passHref={true}
                      style={{
                        margin: '24px',
                      }}
                    >
                      <DetachedHoverEffect
                        className={`${s.hover} ${
                          currentTool &&
                          tool.slug === currentTool.slug &&
                          s.hoverSelect
                        }`}
                      >
                        <span
                          style={{
                            display: 'block',
                            paddingLeft: '16px',
                            paddingRight: '16px',
                            paddingTop: '8px',
                            paddingBottom: '8px',
                          }}
                        >
                          {tool.title}
                        </span>
                      </DetachedHoverEffect>
                    </Link>
                  ))}
                </div>
                <div style={{ marginBottom: 96, width: '70%' }}>
                  <p
                    style={{
                      maxWidth: 700,
                      marginLeft: 'auto',
                      marginRight: 'auto',
                      marginTop: '48px',
                      marginBottom: '48px',
                    }}
                  >
                    {currentTool
                      ? currentTool.description
                      : 'Component not found.'}
                  </p>
                  <SelectInput
                    expanded={selectVisibility}
                    selectId="toolSelect"
                    selected={selectedOption}
                    options={options}
                    onClick={() => {
                      setSelectVisibility((state) => !state);
                    }}
                  >
                    <SelectValue
                      style={{
                        color: 'red', // WHEN FOCUSED IEURBGIER
                      }}
                    >
                      {selectedOption.value}
                    </SelectValue>
                    {selectVisibility && (
                      <div style={{ position: 'absolute' }}>
                        <h5>Options</h5>
                        {options.map((option) => (
                          <SelectOption
                            selectId="toolSelect"
                            key={option.id}
                            onCancel={() => {
                              setSelectVisibility(false);
                            }}
                            onClick={() => {
                              setSelectedOption(option);
                              setSelectVisibility(false);
                            }}
                            style={{
                              color:
                                selectedOption.id === option.id
                                  ? 'red'
                                  : 'black',
                            }}
                          >
                            {option.value}
                          </SelectOption>
                        ))}
                      </div>
                    )}
                  </SelectInput>

                  {currentTool &&
                    currentTool.content.map((example, index) => (
                      <>
                        <div
                          key={index}
                          style={{
                            // marginLeft: 8,
                            // width: '100%',
                            border: '2px solid #262C35',
                            borderRadius: '6px 6px 0px 0',
                            // padding: '16px',
                            flexGrow: 0,
                            flexShrink: 0,
                            background: '#ecf4fa',
                            padding: '24px',
                          }}
                        >
                          <example.example />
                        </div>
                        <div style={{}}>
                          {example.exampleMarkDown && (
                            <CodeBox
                              code={example.exampleMarkDown}
                              style={{
                                height: '100%',
                                borderRadius: '0px 0 6px 6px',
                                marginBottom: '64px',
                              }}
                            />
                          )}
                        </div>
                      </>
                    ))}
                </div>
              </Flex>
            </PageContentWrap>
          </div>
        </main>
        <Footer />
      </PageWithFooter>
    </>
  );
};

export default ToolsReactLibrary;
