import type { NextPage } from 'next';
import Head from 'next/head';
import PageContentWrap from '../../components/generic/PageContentWrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import Banner from '../../components/Banner';
import PageTitle from '../../components/PageTitle';
import PageIntro from '../../components/PageIntro';
import s from './index.module.css';
import Heading from '../../components/Heading';
import {
  faAlignJustify,
  faArrowUpWideShort,
  faBackward,
  faBackwardStep,
  faForward,
  faForwardFast,
  faForwardStep,
  faPause,
  faPlay,
} from '@fortawesome/free-solid-svg-icons';
import Flex from '../../components/generic/Flex';
import useAudio from '../../hooks/useAudio';
import { useEffect, useRef, useState } from 'react';
import Image from 'next/image';
import AudioSoundGraph from '../../components/generic/AudioSoundGraph';
import { getTimeString } from '../../utils/time';
import { fetchAudioLevels } from '../../hooks/useAudioFuncs';

const Projects: NextPage = () => {
  const audioRef = useRef<HTMLMediaElement>(null);
  const elementRef = useRef<HTMLDivElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  const {
    audioSourceNode,
    connectAudio,
    playAudio,
    pauseAudio,
    setAudioTime,
    audioState,
    audioProgress,
    currentAudioTime,
    currentAudioTimeString,
    audioDuration,
  } = useAudio(audioRef);

  const [audioLevels, setAudioLevels] = useState<number[]>([]);
  const [isOverGraph, setIsOverGraph] = useState(false);
  const [graphIndicator, setGraphIndicator] = useState(0);
  const [graphIndicatorTimeString, setGraphIndicatorTimeString] =
    useState('0:00');

  useEffect(() => {
    if (!containerRef.current) return;
    const localRef = containerRef.current;

    const handleGraphMouseLeave = () => {
      localRef.addEventListener('mouseover', handleGraphMouseOver);
    };

    const handleGraphMouseMove = (event: MouseEvent) => {
      if (!elementRef.current) return;

      // Center indicator on mouse location.
      const posX = event.offsetX - elementRef.current.offsetWidth / 2;

      const progress = event.offsetX / localRef.offsetWidth;
      const secondsIntoTrack = audioDuration * progress;

      const timeString = getTimeString(secondsIntoTrack);

      setGraphIndicator(posX);
      setGraphIndicatorTimeString(timeString);
    };
    const handleGraphMouseOver = () => {
      localRef.removeEventListener('mouseover', handleGraphMouseMove);
      localRef.addEventListener('mousemove', handleGraphMouseMove);
      localRef.addEventListener('mouseleave', handleGraphMouseLeave);
      setIsOverGraph(true);
    };

    localRef.addEventListener('mouseover', handleGraphMouseOver);

    return () => {
      if (!localRef) return;
      localRef.removeEventListener('mouseover', handleGraphMouseOver);
      if (isOverGraph) {
        localRef.removeEventListener('mousemove', handleGraphMouseMove);
        localRef.removeEventListener('mouseleave', handleGraphMouseLeave);
      }
    };
  }, [isOverGraph, audioDuration]);

  useEffect(() => {
    const run = async () => {
      setAudioLevels(await fetchAudioLevels('/audio/letra-echoes.wav'));
    };

    run();
  }, []);

  const togglePlay = () => {
    if (!audioSourceNode) {
      connectAudio();
      playAudio();
    } else if (audioState === 'playing') {
      pauseAudio();
    } else {
      playAudio();
    }
  };

  const handleClickGraph = (event: MouseEvent) => {
    const localGraphRef = containerRef.current;
    if (!localGraphRef) return;

    const progress = event.nativeEvent.offsetX / localGraphRef.offsetWidth;
    const secondsIntoTrack = audioDuration * progress;
    console.log(progress, secondsIntoTrack);

    setAudioTime(secondsIntoTrack);
  };

  return (
    <>
      <Head>
        <title>Projects | Phillip Miles React Portfolio</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Banner />
      <PageContentWrap>
        <div style={{ textAlign: 'center', marginTop: 64, marginBottom: 96 }}>
          <PageTitle>React Construct</PageTitle>
          <PageIntro>Made with React Construct</PageIntro>
        </div>

        <Flex className={s.contentBox}>
          <Flex className={s.left}>
            <PageContentWrap>
              <Heading tag="h2" as="h4">
                Audio Player
              </Heading>
              <p>Made with</p>
              <ul>
                <li>useAudio</li>
                <li>useAudioLevel</li>
                <li>useDragContained</li>
                <li>AudioSoundGraph</li>
              </ul>
            </PageContentWrap>
          </Flex>
          <div className={s.right}>
            <Flex className={s.playerContainer}>
              <Flex className={s.playerTopContainer}>
                <div>
                  <div
                    className={s.albumArt}
                    style={{
                      width: '300px',
                      height: '300px',
                    }}
                  >
                    <div className={s.box}>
                      <Image src="/audioTest2.jpg" fill alt="" />
                    </div>
                  </div>
                  <Heading
                    tag="h3"
                    as="heading6"
                    style={{
                      marginTop: ' 48px',
                      marginBottom: 0,
                      fontSize: '24px',
                      textAlign: 'center',
                    }}
                  >
                    Echoes
                  </Heading>
                  <span
                    style={{
                      display: 'block',
                      marginTop: '8px',
                      opacity: 0.7,
                      textAlign: 'center',
                      color: 'white',
                    }}
                  >
                    Letra
                  </span>
                </div>
              </Flex>

              <div
                style={{
                  backgroundColor: '#442255',
                  height: '120px',
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  padding: '32px',
                }}
              >
                <Flex style={{ alignItems: 'center', position: 'relative' }}>
                  <button className={s.button}>
                    <FontAwesomeIcon
                      icon={faBackwardStep}
                      style={{ height: '16px', width: '16px' }}
                    />
                  </button>
                  <button
                    className={s.button}
                    onClick={togglePlay}
                    style={{
                      height: '64px',
                      width: '64px',
                      background: '#d33c94',
                    }}
                  >
                    {audioState === 'playing' && (
                      <FontAwesomeIcon
                        icon={faPause}
                        style={{ height: '20px', width: '20px' }}
                      />
                    )}
                    {audioState !== 'playing' && (
                      <FontAwesomeIcon
                        icon={faPlay}
                        style={{ height: '20px', width: '20px' }}
                      />
                    )}
                  </button>

                  <button className={s.button}>
                    <FontAwesomeIcon
                      icon={faForwardStep}
                      style={{ height: '16px', width: '16px' }}
                    />
                  </button>
                </Flex>
                <div className={s.graphContainer}>
                  <div
                    ref={elementRef}
                    className={s.dragElement}
                    style={{
                      left: `${graphIndicator}px`,
                    }}
                  >
                    <div />
                    <span>{graphIndicatorTimeString}</span>
                  </div>
                  <div
                    ref={containerRef}
                    className={s.graphContainerInner}
                    onClick={handleClickGraph}
                  >
                    <AudioSoundGraph
                      data={audioLevels}
                      progress={audioProgress / 100}
                    />
                  </div>
                </div>
              </div>
            </Flex>
            <audio
              ref={audioRef}
              src="/audio/letra-echoes.wav"
              controls
              style={{ width: '100%' }}
            >
              <source type="audio/mpeg" src="/audio/letra-echoes.wav" />
            </audio>
          </div>
        </Flex>
      </PageContentWrap>
    </>
  );
};

export default Projects;
