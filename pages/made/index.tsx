import type { NextPage } from 'next';
import Head from 'next/head';
import PageContentWrap from '../../components/generic/PageContentWrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import TestSVG from './test.svg';
import {
  faAws,
  faCss3,
  faGit,
  faGithub,
  faHtml5,
  faJs,
  faJsSquare,
  faNode,
  faNodeJs,
  faReact,
  faShopify,
} from '@fortawesome/free-brands-svg-icons';

import Banner from '../../components/Banner';
import ProjectCard from '../../components/ProjectCard';
import ProjectCardWide from '../../components/ProjectCardWide';
import PageTitle from '../../components/PageTitle';
import PageIntro from '../../components/PageIntro';
import projects from '../../data/projects';
import s from './index.module.css';
import Heading from '../../components/Heading';
import {
  faAlignJustify,
  faArrowUpWideShort,
  faBackward,
  faBackwardStep,
  faForward,
  faForwardFast,
  faForwardStep,
  faPause,
  faPlay,
} from '@fortawesome/free-solid-svg-icons';
import Flex from '../../components/generic/Flex';
import useAudio from '../../hooks/useAudio';
import { useEffect } from 'react';

import useAudioLevel from '../../hooks/useAudioLevel';
import Image from 'next/image';
import AudioSoundGraph from '../../components/generic/AudioSoundGraph';

const Projects: NextPage = () => {
  //   a: audioObject.current,
  //   progress: progress,
  //   setTime: changeTime,
  //   buffered: buffered,
  //   currentTimeString: currentTimeString,
  //   durationTimeString: durationTimeString,
  //   load: loadAudio,
  //   play: play,
  //   pause: pause,
  //   audioState: audioState,
  // const audio = useAudio('/audio/trying-to-make-a-song.mp3');
  // const decibals = useAudioLevel('/audio/trying-to-make-a-song.mp3');
  // const audio = useAudio('/audio/mixaund-hope.mp3');
  // const decibals = useAudioLevel('/audio/mixaund-hope.mp3');
  const audio = useAudio('/audio/letra-echoes.wav');
  const decibals = useAudioLevel('/audio/letra-echoes.wav');

  useEffect(() => {
    if (audio.audioState === 'loaded') {
      audio.play();
    }
  }, [audio.audioState]);

  const togglePlay = () => {
    if (audio.audioState === 'unloaded') {
      audio.load();
    } else if (audio.audioState === 'play') {
      // const analyserData = audio.getAnalyserData();
      // console.log(analyserData);
      audio.pause();
    } else if (audio.audioState === 'pause') {
      audio.play();
    }
  };

  return (
    <>
      <Head>
        <title>Projects | Phillip Miles React Portfolio</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Banner />
      <PageContentWrap>
        <div style={{ marginBottom: 96 }}>
          <div style={{ textAlign: 'center', marginTop: 64, marginBottom: 96 }}>
            <PageTitle>React Construct</PageTitle>
            <PageIntro>Made with React Construct</PageIntro>
          </div>
          <Flex>
            <div style={{ width: '40%' }}>
              <Heading tag="h2" as="h5">
                Audio Player
              </Heading>
              <p>Made with</p>
              <ul>
                <li>useAudio</li>
                <li>useAudioLevel</li>
                <li>useDragContained</li>
              </ul>
            </div>
            <div style={{ flexGrow: 1, width: '60%' }}>
              <div
                style={{
                  display: 'flex',
                  width: '100%',
                  height: '80px',
                  position: 'relative',
                  // objectFit: 'cover',
                }}
              >
                {/* <AudioSoundGraph data={decibals} /> */}
                {/* <Image alt="" fill={true} src={'/test.svg'} /> */}
              </div>

              {/* <Flex
                style={{
                  gap: '4px',
                  alignItems: 'flex-end',
                  height: '200px',
                  marginBottom: '24px',
                }}
              >
                {audio.audioState === 'play' &&
                  audio.getAnalyserData().map((data) => {
                    return (
                      <div
                        style={{
                          width: '8px',
                          height: `${data / 2}px`,
                          backgroundColor: '#d33c94',
                          flexShrink: 0,
                        }}
                      />
                    );
                  })}
              </Flex> */}
              <div
                style={{
                  background: '#331540',
                  padding: '128px 16px',
                  borderRadius: '32px 32px 0 0',
                }}
              >
                <Flex
                  style={{
                    alignItems: 'center',
                    justifyContent: 'center',
                  }}
                >
                  <div
                    className={s.albumArt}
                    style={{
                      width: '300px',
                      height: '300px',
                    }}
                  >
                    <div className={s.box}>
                      <Image src="/audioTest.jpg" fill />
                    </div>
                  </div>
                </Flex>
              </div>
              <div
                style={{
                  borderRadius: '0 0 32px 32px',
                  backgroundColor: '#442255',
                  height: '120px',
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  padding: '32px',
                }}
              >
                <Flex
                  style={{
                    position: 'relative',
                    flexGrow: 1,
                    height: '80px',
                    marginRight: '32px',
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}
                >
                  {/*
                  <div
                    style={{
                      position: 'absolute',
                      // background: 'red',
                      // filter: 'hue-rotate(90deg)',
                      left: 0,
                      top: 0,
                      bottom: 0,
                      right: 0,
                      overflow: 'hidden',
                      width: `${audio.progress}%`,
                      // width: '100%',
                      // marginRight: '50%',
                    }}
                  >
                    <Flex
                      style={{
                        alignItems: 'center',
                        flexWrap: 'nowrap',
                        width: '100%',
                        height: '100%',
                      }}
                    >
                      {decibals.map((seg) => (
                        <div
                          style={{
                            flexGrow: 1,
                            flexShrink: 0,
                            // height: `${(Math.abs(seg) - 50) * 4}px`,
                            height: `${seg}%`,
                            // background: '#d33c94',
                            background: '#d33c94',
                            // filter: 'hue-rotate(90deg)',
                          }}
                        />
                      ))}
                    </Flex>
                  </div>
                  <Flex
                    style={{
                      alignItems: 'center',

                      flexGrow: 1,
                    }}
                  >
                    {decibals.map((seg) => (
                      <div
                        style={{
                          flexGrow: 1,
                          // height: `${(Math.abs(seg) - 50) * 4}px`,
                          height: `${seg}%`,
                          // background: '#d33c94',
                          background: '#775588',
                          // filter: 'hue-rotate(90deg)',
                        }}
                      />
                    ))}
                  </Flex>
                   */}

                  <AudioSoundGraph
                    data={decibals}
                    progress={audio.progress / 100}
                  />
                </Flex>
                <Flex style={{ alignItems: 'center', position: 'relative' }}>
                  <button className={s.button}>
                    <FontAwesomeIcon
                      icon={faBackwardStep}
                      style={{ height: '16px', width: '16px' }}
                    />
                  </button>
                  <button
                    className={s.button}
                    onClick={togglePlay}
                    style={{
                      height: '64px',
                      width: '64px',
                      background: '#d33c94',
                    }}
                  >
                    {audio.audioState === 'play' && (
                      <FontAwesomeIcon
                        icon={faPause}
                        style={{ height: '20px', width: '20px' }}
                      />
                    )}
                    {audio.audioState !== 'play' && (
                      <FontAwesomeIcon
                        icon={faPlay}
                        style={{ height: '20px', width: '20px' }}
                      />
                    )}
                  </button>

                  <button className={s.button}>
                    <FontAwesomeIcon
                      icon={faForwardStep}
                      style={{ height: '16px', width: '16px' }}
                    />
                  </button>
                </Flex>
              </div>
            </div>
          </Flex>
        </div>
      </PageContentWrap>
    </>
  );
};

export default Projects;
