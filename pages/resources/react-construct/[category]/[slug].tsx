import type { NextPage } from 'next';
import Head from 'next/head';
import PageContentWrap from '../../../../components/generic/PageContentWrap';
import Flex from '../../../../components/generic/Flex';
import Footer from '../../../../components/Footer';
import PageWithFooter from '../../../../components/generic/PageWithFooter';
import Banner from '../../../../components/Banner';
import PageTitle from '../../../../components/PageTitle';
import PageIntro from '../../../../components/PageIntro';
import tools from '../../../../data/tools/list';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useCallback, useEffect, useMemo, useState } from 'react';
import CodeBox from '../../../../components/generic/CodeBox';
import DetachedHoverEffect from '../../../../components/generic/DetachedHoverEffect';
import s from './[slug].module.css';
import Select from '../../../../components/Select';
import SelectMobile from '../../../../components/SelectMobile';
import Notification from '../../../../components/Notification';
import StickyContainer from '../../../../components/generic/StickyTopBar';
import SelectInput from '../../../../components/generic/SelectInput';
import SelectControl from '../../../../components/generic/SelectControl';
import SelectOption from '../../../../components/generic/SelectOption';

import { usePathname } from 'next/navigation';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTwitter } from '@fortawesome/free-brands-svg-icons';
import {
  faChevronDown,
  faChevronLeft,
  faChevronUp,
} from '@fortawesome/free-solid-svg-icons';
import { createPortal } from 'react-dom';

const ToolsReactLibrary: NextPage = () => {
  const router = useRouter();

  const [currentTool, setCurrentTool] = useState(null);

  useEffect(() => {
    if (!router.query.category) return;
    console.log(router);

    const category = tools.find(
      (category) => category.slug === router.query.category
    );

    const item = category.items.find((item) => item.slug === router.query.slug);

    if (!item) {
      return;
    }

    setCurrentTool({ value: item.title, id: item.slug, ...item });
  }, [router]);

  const selectCurrentTool = useCallback(
    (option) => {
      router.push(
        {
          pathname: '/resources/react-construct/[category]/[slug]',
          query: { category: option.categorySlug, slug: option.slug },
        },
        undefined,
        {
          scroll: false,
        }
      );
    },
    [router]
  );

  const toolOptions = tools.reduce(
    (accumulator: { id: string }[], category) => [
      ...accumulator,
      ...category.items.map((item) => ({
        category: category.category,
        categorySlug: category.slug,
        id: item.slug,
        // value: item.title,
        ...item,
      })),
    ],
    []
  );

  return (
    <>
      <Head>
        <title>React Construct | Phillip Miles</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Banner />
      <PageContentWrap>
        <div style={{ marginBottom: 128 }}>
          <div style={{ textAlign: 'center', marginTop: 64 }}>
            <PageTitle>React Construct</PageTitle>
            <PageIntro>
              React Construct is a library of low-level react components used to
              construct reusable UI components.
            </PageIntro>
          </div>
        </div>
      </PageContentWrap>
      <div
        style={{
          background: 'white',
          //padding: '16px'
          paddingTop: '64px',
          position: 'sticky',
          top: 0,
        }}
      >
        <PageContentWrap>
          <Notification style={{ marginBottom: '64px' }}>
            This library is under development. A NPM module will be made
            available when it is ready.
          </Notification>

          <div className={s.menuSelectContainer}>
            <h5>Component:</h5>
            <SelectControl
              selectId={'menu'}
              options={toolOptions}
              onSelect={selectCurrentTool}
              selectedOption={{
                value: currentTool && currentTool.title,
                ...currentTool,
              }}
            >
              {({
                selectVisibility,
                selectedOption,
                options,
                inputProps,
                optionProps,
              }) => (
                <>
                  <div className={s.menuSelect}>
                    <SelectInput
                      {...inputProps}
                      style={{ padding: '16px 24px' }}
                    />

                    <FontAwesomeIcon
                      icon={selectVisibility ? faChevronUp : faChevronDown}
                      style={{
                        height: '24px',
                        position: 'absolute',
                        right: '24px',
                        top: '50%',
                        transform: 'translateY(-50%)',
                      }}
                    />
                  </div>
                  {selectVisibility &&
                    createPortal(
                      <div className={s.menuSelectOptions}>
                        <h5
                          style={{
                            padding: '8px 8px 16px 8px',
                            borderBottom: '2px solid var(--black-color)',
                          }}
                        >
                          Components
                        </h5>

                        {options.map((option, index) => {
                          return (
                            <SelectOption
                              key={index}
                              {...option}
                              {...optionProps}
                              className={s.menuSelectOption}
                              style={{
                                backgroundColor:
                                  selectedOption.id === option.id
                                    ? 'var(--black-color)'
                                    : 'white',
                                color:
                                  selectedOption.id === option.id
                                    ? 'white'
                                    : 'black',
                              }}
                            >
                              {option.title}
                            </SelectOption>
                          );
                        })}
                      </div>,
                      document.body
                    )}
                </>
              )}
            </SelectControl>
          </div>
          <Flex
            style={{
              width: '100%',
              alignItems: 'flex-start',
            }}
          >
            <div
              className={s.componentMenu}
              // isRetractable={false}
              style={
                {
                  // background: 'yellow',
                }
              }
            >
              {tools.map((category) => (
                <div key={category.slug}>
                  <h6>{category.category}</h6>

                  {category.items.map((item) => (
                    <Link
                      key={item.slug}
                      href={{
                        pathname:
                          '/resources/react-construct/[category]/[slug]',
                        query: { category: category.slug, slug: item.slug },
                      }}
                      scroll={false}
                      passHref={true}
                      style={{
                        display: 'block',
                        margin: '16px 0',
                      }}
                    >
                      <DetachedHoverEffect
                        className={`${s.hover} ${
                          currentTool &&
                          item.slug === currentTool.slug &&
                          s.hoverSelect
                        }`}
                      >
                        <span
                          style={{
                            display: 'block',
                            paddingLeft: '16px',
                            paddingRight: '16px',
                            paddingTop: '8px',
                            paddingBottom: '8px',
                          }}
                        >
                          {item.title}
                        </span>
                      </DetachedHoverEffect>
                    </Link>
                  ))}
                </div>
              ))}
            </div>

            <div className={s.content}>
              <div
                style={{
                  // maxWidth: '700px',
                  marginTop: '48px',
                  marginBottom: '48px',
                }}
              >
                <h4 className={s.componentHeading}>
                  {currentTool ? currentTool.title : 'Title'}
                </h4>
                {/* <div dangerouslySetInnerHTML> */}
                {!currentTool && (
                  <p
                    style={{
                      marginLeft: 'auto',
                      marginRight: 'auto',
                    }}
                  >
                    Component not found.
                  </p>
                )}

                {currentTool && (
                  <>
                    {typeof currentTool.description === 'string' ? (
                      <p
                        style={{
                          marginLeft: 'auto',
                          marginRight: 'auto',
                        }}
                      >
                        {currentTool.description}
                      </p>
                    ) : (
                      <>
                        {currentTool.description.map((para) => (
                          <p>{para}</p>
                        ))}
                      </>
                    )}
                  </>
                )}
              </div>

              {currentTool &&
                currentTool.content.map((example, index) => (
                  <div key={index}>
                    <div
                      key={index}
                      style={{
                        // marginLeft: 8,
                        // width: '100%',
                        border: '2px solid #262C35',
                        borderRadius: '6px 6px 0px 0',
                        // padding: '16px',
                        flexGrow: 0,
                        flexShrink: 0,
                        background: '#ecf4fa',
                        padding: '24px',
                      }}
                    >
                      <example.example />
                    </div>
                    <div>
                      {example.exampleMarkDown && (
                        <CodeBox
                          code={example.exampleMarkDown}
                          style={{
                            height: '100%',
                            borderRadius: '0px 0 6px 6px',
                            marginBottom: '64px',
                          }}
                        />
                      )}
                    </div>
                  </div>
                ))}
            </div>
          </Flex>
        </PageContentWrap>
      </div>
    </>
  );
};

export default ToolsReactLibrary;
